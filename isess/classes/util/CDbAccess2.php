<?php

require_once 'interfaces/IDbAccess.php';
@include_once("config.php");
/**
 * Updated Db access class that uses the external DBClass for its execution
 *
 * @author Victor Aluko 
 */
class CDbAccess2 implements IDbAccess {

    /**
     * @var DBClass db class instace for DB operations 
     */
    protected $db;
    
    /**
     * @var integer Last error code generated by a DB operation 
     */
    protected $lastErrorCode;
        
    /**
     * @var string Last error message string generated by a DB operation 
     */
    protected $lastErrorMsg;
    
    protected $connectionDetails;

    /**
     * Class Constructor
     */
    public function __construct() {
        $this->db = new DBClass();        
        // Set the default connection details
        $this->connectionDetails['host'] = DB_HOST;
        $this->connectionDetails['dbserver'] = 'mysql';
        $this->connectionDetails['port'] = 3306;
    }
    
    /**
     * Returns a column in one row result set
     * @param string $_szColumn
     * @param string $_szTable
     * @param string $_szCondition
     * @param string $_Login
     * @param string $_Password
     * @param string $_Database
     */
    public function GetRow($_szColumn, $_szTable, $_szCondition = "", $_Login = '', $_Password = '', $_Database = DB_NAME) {
        // Build the query
        $selSql = "SELECT `{$_szColumn}` FROM `{$_szTable}` {$_szCondition}";
        try {
            $resultSet = $this->db->execQuery($selSql, FALSE, DBClass::FETCH_MODE_ASSOC);
            return $resultSet[0][$_szColumn];
        } catch (QueryException $ex) {
            $this->lastErrorMsg = $ex->getMessage();
            $this->lastErrorCode = $ex->getCode();
            return false;
        }
    }

    /**
     * 
     * @param type $_szColumns
     * @param type $_szTable
     * @param type $_szCondition
     * @param type $_Login
     * @param type $_Password
     * @param type $_bUseKeyVal
     * @param type $_sDb
     * @return type
     */
    public function ParseColumnsAndRows($_szColumns, $_szTable, $_szCondition = "", $_Login = '', $_Password = '', $_bUseKeyVal = true, $_sDb = DB_NAME) {
        $selSql = "SELECT `{$_szColumns}` FROM `{$_szTable}` {$_szCondition}";
        try {
            if($_bUseKeyVal){
                $resultSet = $this->db->execQuery($selSql, FALSE, DBClass::FETCH_MODE_ASSOC);
            }
            else{
                $resultSet = $this->db->execQuery($selSql, FALSE, DBClass::FETCH_MODE_NUM);
            }
            return $resultSet;
        } catch (QueryException $ex) {
            $this->lastErrorMsg = $ex->getMessage();
            $this->lastErrorCode = $ex->getCode();
            return array(false, $this->lastErrorMsg);
        }
    }

    /**
     * 
     * @param type $_szColumn
     * @param type $_szTable
     * @param type $_szCondition
     * @param type $_Login
     * @param type $_Password
     */
    public function ParseRows($_szColumn, $_szTable, $_szCondition = "", $_Login = '', $_Password = '') {
        throw new Exception("This function has been deprecated!");
    }

    /**
     * Executes the SQL
     * @param string $_SQLQuery the SQL to be executed
     * @param string $_Login Login Username
     * @param string $_Password DB server password
     * @param string $_Database db name
     * @return array
     */
    public function QueryExecution($_SQLQuery, $_Login = '', $_Password = '', $_Database = DB_NAME) {
        try {
            $result = $this->db->execNonQuery($_SQLQuery);
            return array(true);
        } catch (QueryException $ex) {
            $this->lastErrorMsg = $ex->getMessage();
            $this->lastErrorCode = $ex->getCode();
            return array("FALSE", $ex->getMessage());
        }
    }

    /**
     * 
     * @param string $_SQLQuery
     * @param boolean $_bReturnIsertId
     * @param string $_Login
     * @param string $_Password
     * @param string $_Database
     * @return array
     */
    public function ReturnQueryExecution($_SQLQuery, $_bReturnIsertId = false, $_Login = '', $_Password = '', $_Database = DB_NAME) {
        try {
            $result = $this->db->execNonQuery($_SQLQuery);
            if ($_bReturnIsertId) {
                $insertId = $this->db->lastInsertId();
                return array($this->db, $insertId);
            } else {
                return array($this->db, $result);
            }
            
        } catch (QueryException $ex) {
            $this->lastErrorMsg = $ex->getMessage();
            $this->lastErrorCode = $ex->getCode();
            return array(FALSE, $ex->getMessage());
        } 
    }

    /**
     * Sanitizes an input variable for a DB operation
     * @param mixed $_var The variable to be sanitized
     * @return mixed The sanitized value
     */
    public function sanitizeDbInput($_var) {
        return $this->db->escapeParam($_var);
    }

    /**
     * Sets the DB host details for the RDBMS instance
     * @param string $host The host address of the DB 
     * @param string $serverType The name of the RDBMS server type
     * @param integer $port The port of the server
     */
    public function setConnectionDetails($dbname=DB_NAME, $username=DB_USER, $password=DB_PASS, $host=DB_HOST, $serverType='mysql', $port=3306) {
        // Set the connection details
        $this->connectionDetails['username'] = $username;
        $this->connectionDetails['password'] = $password;
        $this->connectionDetails['dbname'] = $dbname;
        $this->connectionDetails['host'] = $host;
        $this->connectionDetails['dbserver'] = $serverType;
        $this->connectionDetails['port'] = $port;
        return $this;
    }
    
    /**
     * Initializes the DB connection 
     * @return boolean Returns TRUE on success and FALSE otherwise
     */
    public function initDBConnection() {
        try {
            
            $this->db = new DBClass();
            $this->db->setConnectionParams($this->connectionDetails['dbserver'], $this->connectionDetails['host'], 
                    $this->connectionDetails['username'], $this->connectionDetails['password'], 
                    $this->connectionDetails['dbname'], $this->connectionDetails['port']
                    )->connect();
            return TRUE;
        } catch (Exception $ex) {
            $this->lastErrorCode = $ex->getCode();
            $this->lastErrorMsg = $ex->getMessage();
            return FALSE;
        }
    }

    /**
     * Gets a new DB connection instance
     * @param string $szUser
     * @param string $szPassword
     * @param string $szDb
     * @return \DBClass
     */
    public function GetDBConnection($szUser, $szPassword, $szDb = DB_NAME) {
        // Get a new DB connection        
        try {
            if (empty($szUser)) {
                // Use the default connection params
                $connection = new DBClass(TRUE);
                return $connection;
            }

            $connection = new DBClass();
            $connection->setConnectionParams("mysql", DB_HOST, $szUser, $szPassword, $szDb);
            $connection->connect();
            return $connection;
        } catch (Exception $ex) {
            $this->lastErrorCode = $ex->getCode();
            $this->lastErrorMsg = $ex->getMessage();
            return NULL;
        }
    }
    
    /**
     * 
     * @return DBClass
     */
    public function getDbConnectionObj() {
        return $this->db;
    }
    
    
}
    